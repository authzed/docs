{
	"version": "0.1",
	"name": "Authzed",
	"scopeName": "source.authzed",
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
	"patterns": [
    { "include": "#comment" },
    { "include": "#importStatement" },
    { "include": "#objectDefinition" },
    { "include": "#objectRelation" },
    { "include": "#objectPermission" },
    { "include": "#operator" },
    { "include": "#prefix" }
  ],
  "repository": {
    "operator": {
      "patterns": [
        { "include": "#and" },
        { "include": "#assignment" },
        { "include": "#comparison" },
        { "include": "#or" },
        { "include": "#union" },
        { "include": "#intersection" },
        { "include": "#exclusion" },
        { "include": "#arrow" },
        { "include": "#wildcard" }
      ],
      "repository": {
        "and": {
          "patterns": [
            {
              "comment": "double ampersand &&",
              "match": "(?<=\\s)&{2}(?=\\s)",
              "name": "keyword.operator.logical.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "assignment": {
          "patterns": [
            {
              "comment": "equals =",
              "match": "(?<=\\s)={1}(?=\\s)",
              "name": "keyword.operator.assignment.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "comparison": {
          "patterns": [
            {
              "comment": "double equals == ",
              "match": "(?<=\\s)={2}(?=\\s)",
              "name": "keyword.operator.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "or": {
          "patterns": [
            {
              "comment": "pipe |",
              "match": "(?<=\\s)\\|(?=\\s)",
              "name": "keyword.operator.logical.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "union": {
          "patterns": [
            {
              "comment": "plus +",
              "match": "(?<=\\s)\\+(?=\\s)",
              "name": "keyword.operator.arithmetic.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "intersection": {
          "patterns": [
            {
              "comment": "ampersand &",
              "match": "(?<=\\s)&{1}(?=\\s)",
              "name": "keyword.operator.logical.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "exclusion": {
          "patterns": [
            {
              "comment": "minus -",
              "match": "(?<=\\s)-(?=\\s)",
              "name": "keyword.operator.arithmetic.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "arrow": {
          "patterns": [
            {
              "comment": "a dash and a greater than ->",
              "match": "(?<=\\w)->(?=\\w)",
              "name": "keyword.operator.logical.authzed markup.bold.authzed string.regexp.authzed"
            }
          ]
        },
        "wildcard": {
          "comment": "a word followed by :*, dangerous, thus marked invalid",
          "match": "\\w+\\:\\*",
          "name": "invalid.authzed"
        }
      }
    },
    "comment": {
      "patterns": [
        { "include": "#lineComment" },
        { "include": "#blockComment" }
      ],
      "repository": {
        "lineComment": {
          "patterns": [
            { "include": "#doubleSlashLineComment" },
            { "include": "#slashDotLineComment" }
          ],
          "repository": {
            "doubleSlashLineComment": {
              "match": "\\/\\/.*",
              "name": "comment.line.double-slash.authzed"
            },
            "slashDotLineComment": {
              "match": "\\/\\*.*\\*\\/",
              "name": "comment.line.authzed"
            }
          }
        },
        "blockComment": {
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "name": "comment.block.authzed"
        }
      }
    },
    "prefix": {
      "comment": "words ending in / or # connected to another word",
      "match": "(?<=\\s)\\w+\\/(?=\\w)",
      "name": "string.quoted.authzed"
    },
    "objectDefinition": {
      "comment": "things that appear on lines that start with caveat or definition",
      "patterns": [
        { "include": "#definition" },
        { "include": "#definitionMethodName" },
        { "include": "#partial" },
        { "include": "#partialMethodName" },
        { "include": "#caveat" },
        { "include": "#caveatMethodName" },
        { "include": "#variable" },
        { "include": "#type" }
      ],
      "repository": {
        "definition": {
          "comment": "the word definition",
          "match": "^\\s*definition",
          "name": "keyword.control.class.authzed"
        },
        "definitionMethodName": {
          "comment": "a word followed by an open bracket",
          "match": "\\w+(?=\\s+\\{)",
          "name": "entity.name.type.class.authzed"
        },
        "partial": {
          "comment": "the word partial",
          "match": "^\\s*partial",
          "name": "keyword.control.class.authzed"
        },
        "partialMethodName": {
          "comment": "a word followed by an open bracket",
          "match": "\\w+(?=\\s+\\{)",
          "name": "entity.name.type.class.authzed"
        },
        "caveat": {
          "comment": "the word caveat",
          "match": "^\\s*caveat",
          "name": "keyword.control.module.authzed"
        },
        "caveatMethodName": {
          "comment": "a word following caveat before an open parentheses",
          "match": "(?<=caveat)\\s+\\w+(?=\\()",
          "name": "entity.name.type.class.authzed"
        },
        "variable": {
          "comment": "words preceeded by an open parentheses or a comma then space(s)",
          "match": "((?<=\\()\\w+\\b|(?<=,\\s+)\\w+\\b)",
          "name": "variable.parameter.function.authzed"
        },
        "type": {
          "comment": "type words",
          "match": "(\\b(?=(?:any|int|uint|bool|string|double|bytes|duration|timestamp|list|map|ipaddress)\\b)\\w+)",
          "name": "markup.italic.authzed storage.type.authzed"
        }
      }
    },
    "importStatement": {
      "comment": "things that appear on lines that start with import",
      "patterns": [
        { "include": "#import" },
        { "include": "#importPath" }
      ],
      "repository": {
        "import": {
          "comment": "the word import",
          "match": "^\\s*import",
          "name": "keyword.control.class.authzed"
        },
        "importPath": {
          "comment": "a quote-delimited string",
          "match": "[\"']\\w+[\"']",
          "name": "string.quoted"
        }
      }
    },
    "objectRelation": {
      "comment": "things that appear on lines that start with relation",
      "patterns": [
        { "include": "#relation" },
        { "include": "#variable" },
        { "include": "#definitionVariable" }
      ],
      "repository": {
        "relation": {
          "comment": "the word relation",
          "match": "^\\s*relation",
          "name": "entity.name.function.authzed"
        },
        "variable": {
          "comment": "a word ending in a colon followed by a space",
          "match": "\\w+:(?=\\s)",
          "name": "constant.language.symbol.authzed"
        },
        "definitionVariable": {
          "comment": "a word ending in # followed by another word",
          "match": "\\w+#(?=\\w)",
          "name": "entity.name.type.class.authzed"
        }
      }
    },
    "objectPermission": {
      "patterns": [
        { "include": "#permission" },
        { "include": "#variable" }
      ],
      "repository": {
        "permission": {
          "comment": "the word permission",
          "match": "^\\s+permission",
          "name": "entity.name.type.authzed"
        },
        "variable": {
          "comment": "a word following permission but before =",
          "match": "(?<=permission\\s)\\w+(?=\\s=)",
          "name": "variable.other.authzed"
        }
      }
    }

  }
}
